{"version":3,"sources":["context/Context.js","components/SearchInput.js","secret/secret.js","reducer/Reducer.js","components/Movie.js","components/MovieList.js","components/TvShow.js","components/TvList.js","components/KnownFor.js","components/Person.js","components/PersonList.js","components/App.js","serviceWorker.js","index.js"],"names":["Context","createContext","withRouter","props","_useContext","useContext","dispatch","_useState","state","useState","_useState2","Object","slicedToArray","query","setQuery","_useState3","_useState4","option","setOption","handleSearch","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","response","json","wrap","_context","prev","next","preventDefault","fetch","concat","sent","type","payload","results","window","scrollTo","alert","stop","_x","apply","this","arguments","useEffect","history","push","header","location","pathname","slice","react_default","createElement","className","value","onChange","target","onClick","Reducer","action","objectSpread","movies","tv","person","Movie","movie","title","src","poster_path","alt","release_date","overview","build_default","rating","vote_average","numberOfStars","starDimension","starSpacing","MovieList","map","components_Movie","key","id","TvShow","name","first_air_date","TvList","components_TvShow","KnownFor","act","width","p","profile_path","known_for","i","media_type","components_KnownFor","Person","App","_useReducer","useReducer","_useReducer2","console","log","Fragment","context_Context","Provider","components_SearchInput","react_router","exact","path","component","PersonList","Boolean","hostname","match","ReactDOM","render","react_router_dom","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bc230cd.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst Context = createContext();\n\nexport default Context;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport Context from \"../context/Context\";\nimport key from \"../secret/secret\";\nimport { withRouter } from \"react-router-dom\";\n\nconst SearchInput = props => {\n  const { dispatch, state } = useContext(Context);\n\n  const [query, setQuery] = useState(\"\");\n  const [option, setOption] = useState(\"movie\");\n\n  const handleQueryChange = e => {\n    setQuery(e.target.value);\n  };\n\n  const handleSelectChange = e => {\n    setOption(e.target.value);\n  };\n\n  const handleSearch = async e => {\n    e.preventDefault();\n    if (query) {\n      const response = await fetch(\n        `https://api.themoviedb.org/3/search/${option}?api_key=${key}&language=en-US&include_adult=false&query=${query}`\n      );\n      const json = await response.json();\n      dispatch({ type: `${option}Results`, payload: json.results });\n      setQuery(\"\");\n      window.scrollTo(0, 900);\n    } else {\n      alert(\"Please Enter a query\");\n    }\n  };\n\n  useEffect(() => {\n    props.history.push(`/${option}`);\n  }, [option, props.history]);\n\n  const header = props.location.pathname.slice(1);\n  return (\n    <form className=\"input_search\">\n      <h2>{header} search</h2>\n      <div className=\"input_search_container\">\n        <input value={query} type=\"text\" onChange={handleQueryChange} />\n        <select onChange={handleSelectChange}>\n          <option value=\"movie\">Movies</option>\n          <option value=\"tv\">Tv Shows</option>\n          <option value=\"person\">People</option>\n        </select>\n\n        <input\n          className=\"input_search_submit\"\n          type=\"submit\"\n          onClick={handleSearch}\n          value=\"search\"\n        />\n      </div>\n    </form>\n  );\n};\n\nexport default withRouter(SearchInput);\n","const key = \"9f9b097afa8858509bc53bab01e5104e\";\n\nexport default key;\n","export default function Reducer(state, action) {\n  switch (action.type) {\n    case \"movieResults\": {\n      return {\n        ...state,\n        movies: action.payload\n      };\n    }\n    case \"tvResults\": {\n      return {\n        ...state,\n        tv: action.payload\n      };\n    }\n    case \"personResults\": {\n      return {\n        ...state,\n        person: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import React from \"react\";\nimport StarRatings from \"react-star-ratings\";\n\nconst Movie = ({ movie }) => (\n  <div className=\"result_container\">\n    <h3>{movie.title}</h3>\n    <div className=\"result-img\">\n      <img\n        src={`http://image.tmdb.org/t/p/w200/${movie.poster_path}`}\n        alt={movie.title}\n      />\n    </div>\n\n    <span className=\"result_release_date\">\n      release date: {movie.release_date}\n    </span>\n\n    <div className=\"result_overview\">\n      <p>{movie.overview ? movie.overview : \"No Overview Available\"}</p>\n    </div>\n    <StarRatings\n      rating={movie.vote_average}\n      numberOfStars={10}\n      starDimension=\"15px\"\n      starSpacing=\"2px\"\n    />\n  </div>\n);\n\nexport default Movie;\n","import React, { useContext } from \"react\";\nimport Context from \"../context/Context\";\nimport Movie from \"./Movie\";\n\nfunction MovieList() {\n  const { state } = useContext(Context);\n\n  return (\n    <div className=\"media_list\">\n      {state.movies &&\n        state.movies.map(movie => <Movie key={movie.id} movie={movie} />)}\n    </div>\n  );\n}\nexport default MovieList;\n","import React from \"react\";\nimport StarRatings from \"react-star-ratings\";\n\nconst TvShow = ({ tv }) => (\n  <div className=\"result_container\">\n    <h3>{tv.name}</h3>\n    <div className=\"result_img\">\n      <img\n        src={`http://image.tmdb.org/t/p/w200/${tv.poster_path}`}\n        alt={tv.title}\n      />\n    </div>\n\n    <span className=\"result_release_date\">air date: {tv.first_air_date}</span>\n    <div className=\"result_overview\">\n      <p>{tv.overview ? tv.overview : \"No overview available\"}</p>\n    </div>\n    <StarRatings\n      rating={tv.vote_average}\n      numberOfStars={10}\n      starDimension=\"15px\"\n      starSpacing=\"2px\"\n    />\n  </div>\n);\n\nexport default TvShow;\n","import React, { useContext } from \"react\";\nimport Context from \"../context/Context\";\nimport TvShow from \"./TvShow\";\n\nfunction TvList() {\n  const { state } = useContext(Context);\n\n  return (\n    <div className=\"media_list\">\n      {state.tv && state.tv.map(tv => <TvShow key={tv.id} tv={tv} />)}\n    </div>\n  );\n}\nexport default TvList;\n","import React from \"react\";\n\nconst KnownFor = ({ act }) => (\n  <div className=\"actor-movies\">\n    <h4>{act.title}</h4>\n    <img\n      width={80}\n      src={`http://image.tmdb.org/t/p/w200${act.poster_path}`}\n      alt={act.title}\n    />\n  </div>\n);\n\nexport default KnownFor;\n","import React from \"react\";\nimport StarRatings from \"react-star-ratings\";\nimport KnownFor from \"./KnownFor\";\n\nconst Movie = ({ p }) => (\n  <div className=\"result_container\">\n    <h3>{p.name}</h3>\n    <div className=\"result-img\">\n      <img\n        src={`http://image.tmdb.org/t/p/w200/${p.profile_path}`}\n        alt={p.name}\n      />\n    </div>\n    <div className=\"actor_known_for\">\n      <h3>Popular Movies Featured</h3>\n      {p.known_for &&\n        p.known_for.map((act, i) => {\n          if (act.media_type === \"movie\") return <KnownFor key={i} act={act} />;\n        })}\n    </div>\n  </div>\n);\n\nexport default Movie;\n","import React, { useContext } from \"react\";\nimport Context from \"../context/Context\";\nimport Person from \"./Person\";\n\nfunction MovieList() {\n  const { state } = useContext(Context);\n\n  return (\n    <div>\n      {state.person && state.person.map(p => <Person key={p.id} p={p} />)}\n    </div>\n  );\n}\nexport default MovieList;\n","import React, { useEffect, useReducer } from \"react\";\nimport \"../css/App.css\";\nimport SearchInput from \"./SearchInput\";\nimport Reducer from \"../reducer/Reducer\";\nimport Context from \"../context/Context\";\nimport MovieList from \"./MovieList\";\nimport TvList from \"./TvList\";\nimport PersonList from \"./PersonList\";\nimport \"../css/App.css\";\nimport \"../css/normalize.css\";\nimport { Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [state, dispatch] = useReducer(Reducer, {\n    movies: [],\n    tv: [],\n    person: []\n  });\n\n  useEffect(() => {\n    console.log(state);\n  }, [state]);\n\n  return (\n    <>\n      <Context.Provider value={{ state, dispatch }}>\n        <SearchInput />\n        <div className=\"results_container\">\n          <Switch>\n            <Route exact path=\"/movie\" component={MovieList} />\n            <Route exact path=\"/tv\" component={TvList} />\n            <Route exact path=\"/person\" component={PersonList} />\n          </Switch>\n        </div>\n      </Context.Provider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}